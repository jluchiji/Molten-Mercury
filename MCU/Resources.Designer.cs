//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MCU {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MCU.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:
        ///    mcu CLEANUP [options] target_file
        ///
        ///CLEANUP command deletes or moves all the unreferenced files from
        ///the specified resource set. 
        ///
        ///WARNING! IT&apos;S STRONGLY RECOMMENDED THAT YOU BACKUP YOUR DATA BEFORE USING
        ///THIS OPTION!!!
        ///
        ///Following options are available:
        ///
        ////move:[location]
        ///    Optional. Moves all detected files to the specified location.
        ///
        ////delete
        ///    Optional. Deletes all detected files.
        ///
        ////noconfirm
        ///    Optional. Suppresses delete/move confirmation.
        ///    
        ////ignore:[ext1],[ext2]...        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CleanupHelp {
            get {
                return ResourceManager.GetString("CleanupHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MoltenChara Utilities (mcu)
        ///2012 (C) Jieni Luchijinzhou a.k.a Aragorn Wyvernzora
        ///.
        /// </summary>
        internal static string CopyrightNotice {
            get {
                return ResourceManager.GetString("CopyrightNotice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:
        ///    mcu DEPLOY [options] patch_file target_file
        ///
        ///DEPLOY command deploys a MoltenChara package to the specified resource
        ///set. Behavior of this command may greatly change depending on the options
        ///supplied. Following options are available:
        ///
        ////deployroot:[path]
        ///    Optional. Specifies the path where file from the package will be extracted.
        ///    %PATCHNAME% can be used to represent file name of the package.
        ///    Path must be relative to the root directory of the resource set.
        ///
        ////checkhash
        ///    Opt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DeployHelp {
            get {
                return ResourceManager.GetString("DeployHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Available Commands are the following. To get detailed help on any of them,
        ///type /? as the first parameter to the command.
        ///
        ///HELP    - Displays this help message
        ///LEGACY  - Loads a legacy resource directory and generates .mcres file
        ///PACK    - Packs character resources into a single self-contained archive
        ///DEPLOY  - Deploys a packed archive to the specified directory
        ///CLEANUP - Deletes (moves) all unreferenced files in a resource set
        ///VERIFY  - Verifies the specified resource set for missing files.
        /// </summary>
        internal static string Help {
            get {
                return ResourceManager.GetString("Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:
        ///    mcu LEGACY [options] directory
        ///
        ///LEGACY command loads a directory used by CharaEX and generates a 
        ///.mcres file for its contents. Following options are available:
        ///
        ////ini:[true|false]
        ///    Indicates whether to load character.ini or not. Default is false.
        ///
        ////width:[int]
        ///    Specifies width of the character bitmap, ignored if /ini:true, mandatory 
        ///    if /ini:false
        ///
        ////height:[int]
        ///    Specifies height of the character bitmap, ignored if /ini:true, mandatory
        ///    if /ini:false
        ///
        ////charaname:[ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LegacyHelp {
            get {
                return ResourceManager.GetString("LegacyHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This software is intended to serve as developer utility for MoltenChara.
        ///For a complete list of commands, type &quot;mcu HELP&quot;.
        ///
        ///This software is a part of the Project Molten Mercury, which is released under 
        ///terms of GNU General Public License, either version 3, or (at your option) any 
        ///later version of the license as published by Free Software Foundation.
        ///
        ///Note: Individual named Raghavendran Shankar did not take any part neither
        ///in designing nor implementing this software solution..
        /// </summary>
        internal static string NoArgsMessage {
            get {
                return ResourceManager.GetString("NoArgsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:
        ///    mcu PACK [options] filename
        ///
        ///PACK command packs character resources into a single self-contained archive
        ///file. Following options are available:
        ///
        ////savestate
        ///    Optional. Saves the character state associated with specified resources
        ///    into the archive. Ignored if there is no state found.
        ///
        ////trim
        ///    Optional. Saves only minimal set of resources needed to recreate the
        ///    character state associated with specified resources. 
        ///    Implies /savestate; results in error if there is no stat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PackHelp {
            get {
                return ResourceManager.GetString("PackHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:
        ///    mcu VERIFY [options] target_file
        ///
        ///VERIFY command checks all files in the specified resource set for whether they
        ///exist. Following options are available:
        ///
        ////deletemissing
        ///    Optional. Deletes character parts with missing files.
        ///
        ////noconfirm
        ///    Optional. Suppresses delete confirmation..
        /// </summary>
        internal static string VerifyHelp {
            get {
                return ResourceManager.GetString("VerifyHelp", resourceCulture);
            }
        }
    }
}
